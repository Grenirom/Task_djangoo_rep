# ОПЕРАТОР "|", ИСПОЛЬЗУЕТСЯ ДЛЯ ПОБИТОВОЙ ОПРЕАЦИИ или НАД ЧИСЛАМИ
print(5 | 2)

#ОПЕРАТОР ^, ЭТО ПОБИТОВАЯ ОПЕРАЦИЯ ИСКЛЮЧИТЕЛЬНО ИЛИ
print( 5 ^ 9)

# оператор ~, побитовое НЕ
# побитовая опреация НЕ для числа x соответствует -(x + 1)
print(~ 5)
print(~ 20)

# оператор <, это оператор 'меньше'
#этот оператор определяет, верно ли утверждение что х меньше чем у
# и затем возвращает True или False
print(5 < 3)
print(3< 5)

#оператор >, все то - же самое, что и с оператором "<"
print(5 > 3)
print(5 > 100)

# оператор <=, меньше или равно. Определяет, верно ли утверждение, что х меньше или равно у
print(3 <= 3)
print(3 <= 5)

# оператор >=, больше или равно. Определяет, верно ли утверждение что, х больше или равно у
print( 4 >= 3 )
print( 4 >= 40)
print(4 >= 4)

#Оператор ==, равно, проверяет, одинаковы ли объекты
x = 2
y = 3
print(x == y)
c = 'str'
v = 'str'
print(c == v)

# оператор !=,  не равно
#оператор проверяет, верно ли что объекты не равны
print(7 != 5)

#Оператор 'not' означает 'логическое НЕ'
# Если х рано True, оператор вернет False. Если же х равно False
# то мы получим True
x = True; not x = True
print(x)

# Оператор 'and', логическое И, x = False; y = True; x and y
# возвращает False, поскольку x равно
# False. В этом случае Python не станет
# проверять значение y, так как уже знает,
# что левая часть выражения „and“
# равняется False, что подразумевает, что
# и всё выражение в целом будет равно
# False, независимо от значений всех
# остальных операндов. Это называется
# укороченной оценкой булевых
# (логических) выражений


# Оператор 'or', логическое 'ИЛИ'
# Если х = True, в результате получим True, в противном случае получим значение у

